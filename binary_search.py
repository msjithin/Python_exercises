class color:
    PURPLE = '\033[1;35;48m'
    CYAN = '\033[1;36;48m'
    BOLD = '\033[1;37;48m'
    BLUE = '\033[1;34;48m'
    GREEN = '\033[1;32;48m'
    YELLOW = '\033[1;33;48m'
    RED = '\033[1;31;48m'
    BLACK = '\033[1;30;48m'
    UNDERLINE = '\033[4;37;48m'
    END = '\033[1;37;0m'
    
# Test cases
nums_list= [[6,7,1,2,3,4,5],
            [1, 2, 3, 4, 5, 6, 7],
            [10, 20, 30, 40, 50, 60],
            [12, 24, 35, 47, 58, 69, 72, 83, 94],
            [5, 13, 28, 41, 56, 63, 77, 82, 99, 105],
            [5, 7, 12, 17, 21, 28, 33, 37, 41, 48, 52, 57, 62, 68, 72],
            [3, 4, 5, -5, -4, -3, -2, -1, 0, 1, 2],
            [3601,3610,3617,3645,3649,3656,3694,3721,3744,3759,3770,3809,3813,3832,3852,3915,3918,3940,3943,3959,3989,4026,4033,4044,4054,4072,4074,4079,4106,4124,4150,4159,4232,4245,4261,4329,4346,4361,4363,4380,4397,4404,4421,4433,4448,4561,4575,4577,4582,4615,4628,4643,4668,4717,4720,4723,4724,4738,4750,4759,4763,4765,4767,4780,4786,4788,4804,4823,4827,4841,4848,4876,4900,4927,4985,5005,5046,5054,5064,5083,5113,5128,5133,5196,5214,5227,5242,5248,5249,5257,5278,5319,5352,5411,5439,5448,5463,5465,5468,5489,5503,5542,5566,5573,5590,5599,5609,5629,5644,5651,5662,5686,5687,5703,5721,5727,5742,5755,5801,5805,5807,5850,5897,5912,5919,5926,5956,5980,5999,6007,6026,6061,6067,6072,6074,6095,6107,6113,6115,6124,6144,6162,6221,6222,6227,6241,6244,6263,6265,6283,6296,6324,6335,6348,6364,6389,6406,6452,6472,6473,6474,6483,6500,6540,6550,6552,6568,6576,6612,6628,6630,6636,6648,6657,6658,6678,6686,6696,6697,6728,6733,6806,6875,6890,6924,6939,6948,6965,6967,6981,6989,6998,7040,7121,7131,7147,7150,7195,7243,7251,7258,7283,7308,7368,7375,7377,7392,7396,7468,7528,7530,7563,7613,7622,7651,7714,7764,7800,7822,7834,7839,7840,7844,7846,7853,7882,7884,7895,7915,7919,7933,7970,8043,8066,8131,8136,8148,8160,8176,8195,8198,8224,8246,8277,8292,8335,8404,8420,8431,8455,8514,8526,8539,8541,8571,8587,8597,8604,8651,8661,8686,8716,8734,8736,8762,8771,8772,8793,8842,8852,8853,8860,8884,8901,8934,8970,8985,9005,9008,9010,9088,9095,9121,9122,9134,9156,9207,9209,9215,9254,9263,9313,9319,9328,9358,9405,9431,9434,9464,9477,9481,9493,9519,9522,9523,9524,9568,9577,9584,9595,9608,9610,9620,9652,9661,9662,9709,9751,9783,9790,9792,9801,9802,9808,9848,9874,9919,9949,9951,-10000,-9985,-9970,-9944,-9862,-9857,-9813,-9779,-9734,-9702,-9661,-9606,-9602,-9598,-9584,-9559,-9515,-9496,-9494,-9491,-9481,-9394,-9392,-9370,-9312,-9308,-9307,-9281,-9265,-9249,-9221,-9220,-9188,-9180,-9177,-9169,-9105,-9084,-9073,-9050,-9030,-9028,-9023,-8972,-8965,-8957,-8913,-8907,-8904,-8864,-8856,-8843,-8840,-8836,-8813,-8792,-8745,-8738,-8730,-8727,-8726,-8697,-8659,-8615,-8579,-8569,-8559,-8503,-8501,-8492,-8490,-8476,-8470,-8438,-8435,-8428,-8423,-8421,-8399,-8275,-8268,-8227,-8162,-8119,-8102,-8093,-8068,-8048,-8009,-7993,-7967,-7955,-7946,-7930,-7914,-7883,-7881,-7860,-7856,-7816,-7764,-7755,-7744,-7739,-7718,-7705,-7697,-7687,-7638,-7636,-7629,-7625,-7593,-7546,-7542,-7528,-7511,-7481,-7445,-7437,-7399,-7393,-7391,-7385,-7383,-7375,-7359,-7317,-7267,-7258,-7256,-7252,-7247,-7208,-7206,-7195,-7181,-7174,-7148,-7122,-7071,-7054,-7053,-7050,-7040,-7011,-7009,-6971,-6945,-6922,-6903,-6877,-6802,-6795,-6794,-6771,-6740,-6716,-6690,-6686,-6678,-6662,-6640,-6629,-6620,-6587,-6568,-6560,-6558,-6543,-6536,-6535,-6494,-6437,-6411,-6406,-6397,-6389,-6365,-6362,-6358,-6355,-6345,-6255,-6244,-6168,-6147,-6142,-6110,-6097,-6074,-6068,-6039,-6018,-6014,-6010,-6006,-5993,-5954,-5893,-5865,-5864,-5835,-5833,-5819,-5779,-5764,-5740,-5723,-5721,-5692,-5689,-5681,-5667,-5645,-5642,-5631,-5627,-5608,-5604,-5597,-5592,-5554,-5529,-5523,-5518,-5482,-5461,-5422,-5417,-5410,-5367,-5361,-5351,-5333,-5296,-5278,-5269,-5159,-5157,-5139,-5105,-5020,-4973,-4961,-4923,-4912,-4899,-4887,-4880,-4871,-4868,-4856,-4804,-4800,-4783,-4736,-4719,-4658,-4640,-4616,-4585,-4584,-4573,-4570,-4562,-4552,-4531,-4517,-4391,-4375,-4289,-4288,-4273,-4256,-4215,-4201,-4197,-4190,-4189,-4173,-4127,-4119,-4117,-4104,-4090,-4087,-4050,-4045,-4018,-4017,-3993,-3973,-3964,-3951,-3937,-3935,-3926,-3920,-3915,-3914,-3910,-3898,-3878,-3868,-3843,-3790,-3783,-3775,-3749,-3724,-3718,-3645,-3641,-3608,-3601,-3599,-3579,-3573,-3553,-3524,-3484,-3408,-3326,-3292,-3275,-3233,-3205,-3132,-3121,-3101,-3100,-3056,-3051,-3016,-3006,-3003,-3002,-2990,-2975,-2973,-2971,-2969,-2943,-2939,-2916,-2908,-2879,-2863,-2847,-2797,-2796,-2795,-2781,-2689,-2662,-2660,-2650,-2609,-2571,-2559,-2547,-2526,-2518,-2507,-2477,-2436,-2422,-2419,-2415,-2384,-2333,-2289,-2272,-2241,-2224,-2186,-2157,-2142,-2110,-2104,-2102,-2095,-2057,-2056,-2045,-2035,-2006,-1988,-1952,-1915,-1900,-1882,-1875,-1863,-1850,-1847,-1822,-1805,-1801,-1783,-1780,-1762,-1746,-1740,-1731,-1723,-1708,-1683,-1654,-1610,-1590,-1588,-1564,-1557,-1531,-1529,-1524,-1503,-1499,-1447,-1434,-1433,-1430,-1387,-1381,-1356,-1314,-1295,-1252,-1247,-1233,-1219,-1168,-1142,-1138,-1046,-1044,-1043,-1016,-1007,-998,-969,-917,-914,-901,-899,-895,-877,-865,-862,-853,-784,-772,-771,-742,-732,-711,-679,-671,-652,-649,-599,-573,-570,-569,-548,-532,-502,-498,-472,-470,-463,-412,-365,-355,-330,-291,-282,-230,-221,-205,-147,-139,-82,-71,-70,-64,-17,-14,-10,7,42,44,79,83,106,116,168,192,194,214,235,294,306,343,381,499,585,598,605,621,649,699,710,753,814,863,879,898,920,940,959,962,989,997,1047,1058,1067,1074,1075,1112,1115,1118,1139,1186,1212,1220,1234,1281,1342,1350,1385,1389,1393,1394,1406,1413,1455,1470,1481,1483,1527,1530,1534,1550,1555,1564,1593,1596,1608,1638,1642,1674,1711,1715,1833,1859,1872,1910,1921,1926,1939,1991,2025,2030,2083,2085,2086,2090,2160,2186,2201,2214,2237,2241,2255,2304,2305,2321,2332,2334,2337,2338,2365,2375,2397,2403,2443,2474,2501,2513,2549,2557,2575,2591,2622,2624,2627,2664,2685,2714,2726,2763,2770,2833,2836,2847,2862,2929,2946,2953,2979,2989,3017,3041,3076,3175,3177,3181,3273,3301,3314,3388,3389,3391,3392,3393,3411,3503,3504,3516,3518,3526,3539,3560,3577],
            ]

targets = [6, 1, 50, 12, 56, 5, -5, 6296]
solutions = [0, 0, 4, 0, 4, 0, 3, 150]

def test_cases():
    """
    Test that binary search gave correct result
    """
    n = len(nums_list)
    npassed = 0
    print(f"Number of tests = {n}")
    for i in range(len(nums_list)):
        arr = nums_list[i]
        target = targets[i]
        soln   = solutions[i]
        output = binary_search_rotated(arr, target)
        if output== soln :
            npassed += 1
            print(f"Success: Passed {npassed}/{n}")
        else:
            print(f"{color.RED}FAILED{color.END}: Incorrect index, Array=[{arr[:10]}...], expected index={soln}, Output={output}")
        
    print(f"Passed {npassed}/{n}")
        

def binary_search_rotated(nums, target):
  # Replace this placeholder return statement with your code
  left = 0
  right = len(nums) - 1

  while left <= right:
    mid = (left + right)//2
    print(f'left({left}) : {nums[left]},  mid({mid}) : {nums[mid]},  right({right}) : {nums[right]} \n')
    if nums[left] == target:
        return left 
    if nums[right] == target:
        return right 
    if nums[mid] == target:
        return mid

    if nums[mid] > target and nums[mid]*target > 0:
        right = mid - 1
    elif nums[mid] > target and nums[mid]*target < 0:
        left = mid + 1
    elif nums[mid] < target and nums[mid]*target > 0:
        left = mid + 1
    else:
       right = mid - 1


  return -1


def main():
    test_cases()

if __name__ == '__main__':
    main()